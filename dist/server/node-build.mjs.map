{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/google-auth.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\r\nimport { DemoResponse } from \"@shared/api\";\r\n\r\nexport const handleDemo: RequestHandler = (req, res) => {\r\n  const response: DemoResponse = {\r\n    message: \"Hello from Express server\",\r\n  };\r\n  res.status(200).json(response);\r\n};\r\n","import { RequestHandler } from \"express\";\nimport { google } from \"googleapis\";\n\n// Simple in-memory client for scaffolding (replace with per-user storage)\nlet authClient: ReturnType<typeof getOAuthClient> | null = null;\n\nfunction getOAuthClient() {\n  const clientId = process.env.GOOGLE_CLIENT_ID;\n  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  if (!clientId || !clientSecret) {\n    throw new Error(\"Missing GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET in env\");\n  }\n  // Use 'postmessage' for redirect when exchanging code from frontend\n  const redirectUri = \"postmessage\";\n  return new google.auth.OAuth2(clientId, clientSecret, redirectUri);\n}\n\nexport const handleGoogleCallback: RequestHandler = async (req, res) => {\n  try {\n    const { code } = req.body as { code?: string };\n    if (!code) {\n      return res.status(400).json({ error: \"Missing authorization code\" });\n    }\n\n    const oauth2Client = getOAuthClient();\n    const { tokens } = await oauth2Client.getToken(code);\n    oauth2Client.setCredentials(tokens);\n    authClient = oauth2Client;\n\n    // Do NOT return tokens to client; persist securely in DB if needed\n    return res.status(200).json({ connected: true });\n  } catch (err: any) {\n    console.error(\"Google OAuth callback error:\", err?.message || err);\n    return res.status(500).json({ error: \"Failed to exchange code\" });\n  }\n};\n\nexport const listCalendarEvents: RequestHandler = async (_req, res) => {\n  try {\n    if (!authClient) {\n      return res.status(401).json({ error: \"Not authenticated with Google\" });\n    }\n\n    // Assert non-null after the guard so TS type aligns with Google API typings\n    const calendar = google.calendar({ version: \"v3\", auth: authClient! });\n    const now = new Date();\n    const eventsRes = await calendar.events.list({\n      calendarId: \"primary\",\n      timeMin: now.toISOString(),\n      singleEvents: true,\n      orderBy: \"startTime\",\n      maxResults: 10,\n    });\n\n    return res.status(200).json({ events: eventsRes.data.items ?? [] });\n  } catch (err: any) {\n    console.error(\"List events error:\", err?.message || err);\n    return res.status(500).json({ error: \"Failed to list calendar events\" });\n  }\n};","import \"dotenv/config\";\r\nimport express from \"express\";\r\nimport cors from \"cors\";\r\nimport { Pool } from \"pg\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { handleDemo } from \"./routes/demo\";\r\nimport { google } from \"googleapis\";\r\nimport { z } from \"zod\";\r\nimport { handleGoogleCallback, listCalendarEvents } from \"./routes/google-auth\";\r\n\r\nexport function createServer() {\r\n  const app = express();\r\n\r\n  // Middleware\r\n  app.use(cors());\r\n  // Allow larger JSON payloads for base64 uploads (<=2MB)\r\n  app.use(express.json({ limit: \"2mb\" }));\r\n  app.use(express.urlencoded({ extended: true, limit: \"2mb\" }));\r\n\r\n  // Select Neon/Postgres connection string based on environment\r\n  const envNode = (process.env as any)[\"NODE_ENV\"];\r\n  const isDev = envNode === \"development\" || (!process.env.DATABASE_URL && !!process.env.DEV_DATABASE_URL);\r\n  const databaseUrl = isDev\r\n    ? process.env.DEV_DATABASE_URL ?? process.env.DATABASE_URL\r\n    : process.env.DATABASE_URL;\r\n\r\n  // Debug log: show which env is used and whether URL is present (no secrets)\r\n  const inUse = isDev ? \"DEV_DATABASE_URL\" : \"DATABASE_URL\";\r\n  const hasUrl = Boolean(databaseUrl && databaseUrl.length > 0);\r\n  console.log(`DB config: env=${isDev ? \"development\" : \"production\"} (NODE_ENV=${envNode}), using ${inUse}, present=${hasUrl}`);\r\n\r\n  // Initialize Postgres pool (Neon requires SSL)\r\n  const pool = new Pool({\r\n    connectionString: databaseUrl,\r\n    ssl: { rejectUnauthorized: false },\r\n  });\r\n\r\n  // Helper: resolve tenant slug from header/query with sane default\r\n  const getTenantSlug = (req: express.Request): string => {\r\n    const header = String(req.headers[\"x-tenant-slug\"] || \"\");\r\n    const querySlug = String((req.query as any)?.tenant || \"\");\r\n    const raw = header || querySlug || \"default\";\r\n    const safe = raw.toLowerCase().trim();\r\n    return /^[a-z0-9._-]+$/.test(safe) ? safe : \"default\";\r\n  };\r\n\r\n  // Ensure DB schema is ready before handling any API requests\r\n  const initPromise = (async () => {\r\n    try {\r\n      // Base simple tasks table (used by /api/tasks)\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS tasks (\r\n           id SERIAL PRIMARY KEY,\r\n           text TEXT NOT NULL,\r\n           complete BOOLEAN DEFAULT FALSE,\r\n           assignee TEXT,\r\n           due_date DATE,\r\n           created_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n\r\n      // OAuth token storage for Google Ads\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS google_auth_tokens (\r\n           user_id INT PRIMARY KEY,\r\n           refresh_token TEXT NOT NULL,\r\n           updated_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n\r\n      // Kanban tasks table (synced across boards like UGC/Design)\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS kanban_tasks (\r\n           id TEXT PRIMARY KEY,\r\n           board_slug TEXT NOT NULL,\r\n           title TEXT NOT NULL,\r\n           description TEXT,\r\n           status TEXT NOT NULL,\r\n           priority TEXT NOT NULL,\r\n           due_date TEXT,\r\n           assignee TEXT,\r\n           tags TEXT[] DEFAULT '{}'::text[],\r\n           created_at TIMESTAMPTZ DEFAULT NOW(),\r\n           updated_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n\r\n      // UGC briefs table (Task/URL/Caption/Status list)\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS ugc_briefs (\r\n           id TEXT PRIMARY KEY,\r\n           scope TEXT NOT NULL,\r\n           brief TEXT NOT NULL,\r\n           url TEXT,\r\n           caption TEXT,\r\n           status TEXT NOT NULL,\r\n           created_at TIMESTAMPTZ DEFAULT NOW(),\r\n           updated_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n\r\n      // Calendar tables for events and per-day colours\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS calendar_events (\r\n           id TEXT PRIMARY KEY,\r\n           date DATE NOT NULL,\r\n           title TEXT NOT NULL,\r\n           time TEXT,\r\n           note TEXT,\r\n           created_at TIMESTAMPTZ DEFAULT NOW(),\r\n           updated_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS calendar_day_colors (\r\n           date DATE PRIMARY KEY,\r\n           color TEXT NOT NULL,\r\n           updated_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n\r\n      // Settings configuration (single-row)\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS settings_config (\r\n           id INT PRIMARY KEY DEFAULT 1,\r\n           logo_url TEXT DEFAULT '/netpiu-logo-2-white-no-background.webp',\r\n           meta_title TEXT DEFAULT 'NetPiu Work Management',\r\n           workflow_title TEXT DEFAULT 'Work Management',\r\n           updated_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n      // Seed will be done after multi-tenant columns exist\r\n      // Seats table\r\n      await pool.query(\r\n        `CREATE TABLE IF NOT EXISTS seats (\r\n           id SERIAL PRIMARY KEY,\r\n           email TEXT NOT NULL UNIQUE,\r\n           role TEXT NOT NULL CHECK (role IN ('owner','user')),\r\n           created_at TIMESTAMPTZ DEFAULT NOW()\r\n         )`\r\n      );\r\n      // Multi-tenant preparation: add tenant_slug column and proper unique indexes\r\n      await pool.query(`ALTER TABLE settings_config ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE settings_config SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      // Allow multiple rows by dropping single-row primary key\r\n      await pool.query(`ALTER TABLE settings_config DROP CONSTRAINT IF EXISTS settings_config_pkey`);\r\n      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS settings_config_tenant_slug_unique ON settings_config(tenant_slug)`);\r\n      // Ensure a default tenant row exists\r\n      await pool.query(\r\n        `INSERT INTO settings_config(tenant_slug) VALUES('default')\r\n         ON CONFLICT (tenant_slug) DO NOTHING`\r\n      );\r\n\r\n      await pool.query(`ALTER TABLE seats ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE seats SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      // Switch uniqueness to (tenant_slug, email)\r\n      await pool.query(`ALTER TABLE seats DROP CONSTRAINT IF EXISTS seats_email_key`);\r\n      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS seats_tenant_email_unique ON seats(tenant_slug, email)`);\r\n\r\n      // Tenantize core work tables\r\n      await pool.query(`ALTER TABLE tasks ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE tasks SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      await pool.query(`CREATE INDEX IF NOT EXISTS tasks_tenant_created_idx ON tasks(tenant_slug, created_at DESC)`);\r\n\r\n      // Kanban tasks: move from global PK to tenant+id unique\r\n      await pool.query(`ALTER TABLE kanban_tasks ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE kanban_tasks SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      await pool.query(`ALTER TABLE kanban_tasks DROP CONSTRAINT IF EXISTS kanban_tasks_pkey`);\r\n      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS kanban_tasks_tenant_id_unique ON kanban_tasks(tenant_slug, id)`);\r\n      await pool.query(`CREATE INDEX IF NOT EXISTS kanban_tasks_tenant_board_idx ON kanban_tasks(tenant_slug, board_slug)`);\r\n\r\n      // UGC briefs: unique per tenant + id\r\n      await pool.query(`ALTER TABLE ugc_briefs ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE ugc_briefs SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      await pool.query(`ALTER TABLE ugc_briefs DROP CONSTRAINT IF EXISTS ugc_briefs_pkey`);\r\n      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS ugc_briefs_tenant_id_unique ON ugc_briefs(tenant_slug, id)`);\r\n      await pool.query(`CREATE INDEX IF NOT EXISTS ugc_briefs_tenant_scope_idx ON ugc_briefs(tenant_slug, scope)`);\r\n\r\n      // Calendar events & day colors: unique per tenant\r\n      await pool.query(`ALTER TABLE calendar_events ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE calendar_events SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      await pool.query(`ALTER TABLE calendar_events DROP CONSTRAINT IF EXISTS calendar_events_pkey`);\r\n      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS calendar_events_tenant_id_unique ON calendar_events(tenant_slug, id)`);\r\n      await pool.query(`CREATE INDEX IF NOT EXISTS calendar_events_tenant_date_idx ON calendar_events(tenant_slug, date)`);\r\n\r\n      await pool.query(`ALTER TABLE calendar_day_colors ADD COLUMN IF NOT EXISTS tenant_slug TEXT`);\r\n      await pool.query(`UPDATE calendar_day_colors SET tenant_slug='default' WHERE tenant_slug IS NULL`);\r\n      await pool.query(`ALTER TABLE calendar_day_colors DROP CONSTRAINT IF EXISTS calendar_day_colors_pkey`);\r\n      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS calendar_day_colors_tenant_date_unique ON calendar_day_colors(tenant_slug, date)`);\r\n      console.log(\"DB schema ready\");\r\n    } catch (err: any) {\r\n      console.error(\"Failed to initialize DB schema:\", err?.message || err);\r\n      throw err;\r\n    }\r\n  })();\r\n\r\n  // Gate all requests until DB schema is ready (prevents race on cold start)\r\n  app.use(async (_req, res, next) => {\r\n    try {\r\n      await initPromise;\r\n      next();\r\n    } catch {\r\n      res.status(500).json({ error: \"Database initialization failed\" });\r\n    }\r\n  });\r\n\r\n  // Example API routes\r\n  app.get(\"/api/ping\", (_req, res) => {\r\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\r\n    res.json({ message: ping });\r\n  });\r\n\r\n  app.get(\"/api/demo\", handleDemo);\r\n\r\n  // Google OAuth callbacks and Calendar API\r\n  app.post(\"/api/auth/google/callback\", handleGoogleCallback);\r\n  app.get(\"/api/calendar/events\", listCalendarEvents);\r\n\r\n  // DB health check endpoint to verify Neon connectivity\r\n  app.get(\"/health/db\", async (_req, res) => {\r\n    try {\r\n      const result = await pool.query(\"SELECT 1 AS ok\");\r\n      res.json({ ok: result.rows[0]?.ok === 1, env: isDev ? \"development\" : \"production\" });\r\n    } catch (err: any) {\r\n      console.error(\"DB health check failed:\", err?.message || err);\r\n      res.status(500).json({ ok: false, error: \"DB connection failed\" });\r\n    }\r\n  });\r\n\r\n  // Mirror under /api for Vercel (only /api/* is routed to functions)\r\n  app.get(\"/api/health/db\", async (_req, res) => {\r\n    try {\r\n      const result = await pool.query(\"SELECT 1 AS ok\");\r\n      res.json({ ok: result.rows[0]?.ok === 1, env: isDev ? \"development\" : \"production\" });\r\n    } catch (err: any) {\r\n      console.error(\"DB health check failed:\", err?.message || err);\r\n      res.status(500).json({ ok: false, error: \"DB connection failed\" });\r\n    }\r\n  });\r\n\r\n  // Debug endpoint to peek environment variables presence (do not include secrets)\r\n  app.get(\"/debug/env\", (_req, res) => {\r\n    res.json({\r\n      NODE_ENV: process.env.NODE_ENV,\r\n      using: inUse,\r\n      hasDevUrl: Boolean(process.env.DEV_DATABASE_URL && process.env.DEV_DATABASE_URL.length > 0),\r\n      hasProdUrl: Boolean(process.env.DATABASE_URL && process.env.DATABASE_URL.length > 0),\r\n    });\r\n  });\r\n\r\n  // Mirror under /api for Vercel\r\n  app.get(\"/api/debug/env\", (_req, res) => {\r\n    res.json({\r\n      NODE_ENV: process.env.NODE_ENV,\r\n      using: inUse,\r\n      hasDevUrl: Boolean(process.env.DEV_DATABASE_URL && process.env.DEV_DATABASE_URL.length > 0),\r\n      hasProdUrl: Boolean(process.env.DATABASE_URL && process.env.DATABASE_URL.length > 0),\r\n    });\r\n  });\r\n\r\n  // (Ensures moved to initPromise above)\r\n\r\n  // -----------------------------\r\n  // Google Ads OAuth Flow\r\n  // -----------------------------\r\n  const googleRedirectUri = process.env.GOOGLE_REDIRECT_URI || \"http://localhost:3000/auth/googleads/callback\";\r\n\r\n  app.get(\"/auth/googleads\", (_req, res) => {\r\n    try {\r\n      const clientId = process.env.GOOGLE_CLIENT_ID;\r\n      const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\r\n      if (!clientId || !clientSecret) {\r\n        return res.status(500).send(\"Missing Google OAuth client configuration\");\r\n      }\r\n      const oauth2Client = new google.auth.OAuth2(clientId, clientSecret, googleRedirectUri);\r\n      const authUrl = oauth2Client.generateAuthUrl({\r\n        access_type: \"offline\",\r\n        prompt: \"consent\",\r\n        scope: [\"https://www.googleapis.com/auth/adwords\"],\r\n      });\r\n      res.redirect(authUrl);\r\n    } catch (err: any) {\r\n      console.error(\"Generate auth URL error:\", err?.message || err);\r\n      res.status(500).send(\"Failed to initiate Google Ads auth\");\r\n    }\r\n  });\r\n\r\n  app.get(\"/auth/googleads/callback\", async (req, res) => {\r\n    try {\r\n      const code = req.query.code as string | undefined;\r\n      if (!code) {\r\n        return res.status(400).send(\"Missing authorization code\");\r\n      }\r\n      const clientId = process.env.GOOGLE_CLIENT_ID;\r\n      const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\r\n      if (!clientId || !clientSecret) {\r\n        return res.status(500).send(\"Missing Google OAuth client configuration\");\r\n      }\r\n      const oauth2Client = new google.auth.OAuth2(clientId, clientSecret, googleRedirectUri);\r\n      const { tokens } = await oauth2Client.getToken(code);\r\n      const refreshToken = tokens.refresh_token;\r\n      if (!refreshToken) {\r\n        // If no refresh_token, user may have previously consented; surface a friendly message\r\n        console.warn(\"No refresh_token returned from Google\");\r\n      } else {\r\n        // Save refresh token to DB (user_id=1)\r\n        await pool.query(\r\n          `INSERT INTO google_auth_tokens(user_id, refresh_token)\r\n           VALUES($1, $2)\r\n           ON CONFLICT (user_id) DO UPDATE SET refresh_token=EXCLUDED.refresh_token, updated_at=NOW()`,\r\n          [1, refreshToken]\r\n        );\r\n      }\r\n      // Redirect back to dashboard\r\n      res.redirect(\"/google-ads\");\r\n    } catch (err: any) {\r\n      console.error(\"Google Ads OAuth callback error:\", err?.message || err);\r\n      res.status(500).send(\"Failed to complete Google Ads auth\");\r\n    }\r\n  });\r\n\r\n  // -----------------------------\r\n  // Google Ads Campaigns API\r\n  // -----------------------------\r\n  // Moved to dedicated serverless function at api/googleads/campaigns.ts\r\n\r\n  // -----------------------------\r\n  // Tasks API\r\n  // -----------------------------\r\n  type Task = {\r\n    id: number;\r\n    text: string;\r\n    complete: boolean;\r\n    assignee: string | null;\r\n    due_date: string | null; // YYYY-MM-DD\r\n    created_at: string; // ISO timestamp\r\n  };\r\n\r\n  const CreateTaskSchema = z.object({\r\n    text: z.string().min(1).max(255),\r\n    assignee: z.string().max(50).optional().nullable(),\r\n    due_date: z\r\n      .string()\r\n      .regex(/^\\d{4}-\\d{2}-\\d{2}$/)\r\n      .optional()\r\n      .nullable(),\r\n  });\r\n\r\n  const UpdateTaskStatusSchema = z.object({\r\n    complete: z.boolean(),\r\n  });\r\n\r\n  // GET /api/tasks - list all tasks\r\n  app.get(\"/api/tasks\", async (req, res) => {\r\n    try {\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query<Task>(\r\n        \"SELECT id, text, complete, assignee, to_char(due_date, 'YYYY-MM-DD') AS due_date, created_at FROM tasks WHERE tenant_slug=$1 ORDER BY created_at DESC\",\r\n        [tenantSlug]\r\n      );\r\n      res.json({ tasks: result.rows });\r\n    } catch (err: any) {\r\n      console.error(\"List tasks error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list tasks\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/tasks - create new task\r\n  app.post(\"/api/tasks\", async (req, res) => {\r\n    try {\r\n      const parsed = CreateTaskSchema.safeParse(req.body);\r\n      if (!parsed.success) {\r\n        return res.status(400).json({ error: \"Invalid task payload\" });\r\n      }\r\n      const { text, assignee = null, due_date = null } = parsed.data;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query<Task>(\r\n        \"INSERT INTO tasks(text, assignee, due_date, tenant_slug) VALUES($1, $2, $3, $4) RETURNING id, text, complete, assignee, to_char(due_date, 'YYYY-MM-DD') AS due_date, created_at\",\r\n        [text, assignee, due_date, tenantSlug]\r\n      );\r\n      res.status(201).json({ task: result.rows[0] });\r\n    } catch (err: any) {\r\n      console.error(\"Create task error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create task\" });\r\n    }\r\n  });\r\n\r\n  // PATCH /api/tasks/:id - update complete status\r\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\r\n    try {\r\n      const id = Number(req.params.id);\r\n      if (!Number.isInteger(id) || id <= 0) {\r\n        return res.status(400).json({ error: \"Invalid task id\" });\r\n      }\r\n      const parsed = UpdateTaskStatusSchema.safeParse(req.body);\r\n      if (!parsed.success) {\r\n        return res.status(400).json({ error: \"Invalid patch payload\" });\r\n      }\r\n      const { complete } = parsed.data;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query<Task>(\r\n        \"UPDATE tasks SET complete=$1 WHERE id=$2 AND tenant_slug=$3 RETURNING id, text, complete, assignee, to_char(due_date, 'YYYY-MM-DD') AS due_date, created_at\",\r\n        [complete, id, tenantSlug]\r\n      );\r\n      if (result.rowCount === 0) {\r\n        return res.status(404).json({ error: \"Task not found\" });\r\n      }\r\n      res.json({ task: result.rows[0] });\r\n    } catch (err: any) {\r\n      console.error(\"Patch task error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to update task\" });\r\n    }\r\n  });\r\n\r\n  // DELETE /api/tasks/:id - delete task\r\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\r\n    try {\r\n      const id = Number(req.params.id);\r\n      if (!Number.isInteger(id) || id <= 0) {\r\n        return res.status(400).json({ error: \"Invalid task id\" });\r\n      }\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\"DELETE FROM tasks WHERE id=$1 AND tenant_slug=$2\", [id, tenantSlug]);\r\n      if (result.rowCount === 0) {\r\n        return res.status(404).json({ error: \"Task not found\" });\r\n      }\r\n      res.status(204).send();\r\n    } catch (err: any) {\r\n      console.error(\"Delete task error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to delete task\" });\r\n    }\r\n  });\r\n\r\n  // -----------------------------\r\n  // Kanban Tasks API (sync across devices)\r\n  // -----------------------------\r\n  const StatusEnum = z.enum([\"backlog\", \"in_progress\", \"review\", \"done\"]);\r\n  const PriorityEnum = z.enum([\"low\", \"medium\", \"high\", \"urgent\"]);\r\n\r\n  const CreateKanbanSchema = z.object({\r\n    id: z.string().min(8).max(64).optional(),\r\n    board: z.string().min(1),\r\n    title: z.string().min(1),\r\n    description: z.string().optional(),\r\n    status: StatusEnum.default(\"backlog\"),\r\n    priority: PriorityEnum.default(\"medium\"),\r\n    dueDate: z.string().optional(),\r\n    assignee: z.string().optional(),\r\n    tags: z.array(z.string()).optional().default([]),\r\n  });\r\n\r\n  const UpdateKanbanSchema = z.object({\r\n    title: z.string().min(1).optional(),\r\n    description: z.string().optional(),\r\n    status: StatusEnum.optional(),\r\n    priority: PriorityEnum.optional(),\r\n    dueDate: z.string().optional(),\r\n    assignee: z.string().optional(),\r\n    tags: z.array(z.string()).optional(),\r\n  });\r\n\r\n  // GET /api/kanban/tasks?board=<slug>\r\n  app.get(\"/api/kanban/tasks\", async (req, res) => {\r\n    try {\r\n      const board = (req.query.board as string) || \"\";\r\n      if (!board) return res.status(400).json({ error: \"Missing board slug\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\r\n        `SELECT id, board_slug, title, description, status, priority, due_date, assignee, tags, created_at, updated_at\r\n         FROM kanban_tasks WHERE tenant_slug=$1 AND board_slug=$2 ORDER BY created_at DESC`,\r\n        [tenantSlug, board]\r\n      );\r\n      const tasks = result.rows.map((r: any) => ({\r\n        id: r.id,\r\n        title: r.title,\r\n        description: r.description ?? undefined,\r\n        status: r.status,\r\n        priority: r.priority,\r\n        dueDate: r.due_date ?? undefined,\r\n        assignee: r.assignee ?? undefined,\r\n        tags: (r.tags as string[]) ?? [],\r\n        createdAt: (r.created_at as Date).toISOString?.() ?? r.created_at,\r\n        updatedAt: (r.updated_at as Date).toISOString?.() ?? r.updated_at,\r\n      }));\r\n      res.json({ tasks });\r\n    } catch (err: any) {\r\n      console.error(\"List kanban tasks error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list kanban tasks\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/kanban/tasks\r\n  app.post(\"/api/kanban/tasks\", async (req, res) => {\r\n    try {\r\n      const parsed = CreateKanbanSchema.safeParse(req.body);\r\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const {\r\n        id = Math.random().toString(36).slice(2),\r\n        board,\r\n        title,\r\n        description,\r\n        status,\r\n        priority,\r\n        dueDate,\r\n        assignee,\r\n        tags = [],\r\n      } = parsed.data;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\r\n        `INSERT INTO kanban_tasks(id, tenant_slug, board_slug, title, description, status, priority, due_date, assignee, tags)\r\n         VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)\r\n         RETURNING id, board_slug, title, description, status, priority, due_date, assignee, tags, created_at, updated_at`,\r\n        [id, tenantSlug, board, title, description ?? null, status, priority, dueDate ?? null, assignee ?? null, tags]\r\n      );\r\n      const r = result.rows[0];\r\n      res.status(201).json({\r\n        task: {\r\n          id: r.id,\r\n          title: r.title,\r\n          description: r.description ?? undefined,\r\n          status: r.status,\r\n          priority: r.priority,\r\n          dueDate: r.due_date ?? undefined,\r\n          assignee: r.assignee ?? undefined,\r\n          tags: (r.tags as string[]) ?? [],\r\n          createdAt: (r.created_at as Date).toISOString?.() ?? r.created_at,\r\n          updatedAt: (r.updated_at as Date).toISOString?.() ?? r.updated_at,\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      console.error(\"Create kanban task error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create kanban task\" });\r\n    }\r\n  });\r\n\r\n  // PUT /api/kanban/tasks/:id\r\n  app.put(\"/api/kanban/tasks/:id\", async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const parsed = UpdateKanbanSchema.safeParse(req.body);\r\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const fields = parsed.data;\r\n      const sets: string[] = [];\r\n      const values: any[] = [];\r\n      let idx = 1;\r\n      for (const [k, v] of Object.entries(fields)) {\r\n        if (v === undefined) continue;\r\n        const col =\r\n          k === \"dueDate\" ? \"due_date\" : k === \"tags\" ? \"tags\" : k;\r\n        sets.push(`${col}=$${idx++}`);\r\n        values.push(v);\r\n      }\r\n      if (!sets.length) return res.status(400).json({ error: \"No fields to update\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      values.push(id);\r\n      values.push(tenantSlug);\r\n      const result = await pool.query(\r\n        `UPDATE kanban_tasks SET ${sets.join(\", \")}, updated_at=NOW() WHERE id=$${idx} AND tenant_slug=$${idx + 1}\r\n         RETURNING id, board_slug, title, description, status, priority, due_date, assignee, tags, created_at, updated_at`,\r\n        values\r\n      );\r\n      if (!result.rowCount) return res.status(404).json({ error: \"Task not found\" });\r\n      const r = result.rows[0];\r\n      res.json({\r\n        task: {\r\n          id: r.id,\r\n          title: r.title,\r\n          description: r.description ?? undefined,\r\n          status: r.status,\r\n          priority: r.priority,\r\n          dueDate: r.due_date ?? undefined,\r\n          assignee: r.assignee ?? undefined,\r\n          tags: (r.tags as string[]) ?? [],\r\n          createdAt: (r.created_at as Date).toISOString?.() ?? r.created_at,\r\n          updatedAt: (r.updated_at as Date).toISOString?.() ?? r.updated_at,\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      console.error(\"Update kanban task error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to update kanban task\" });\r\n    }\r\n  });\r\n\r\n  // DELETE /api/kanban/tasks/:id\r\n  app.delete(\"/api/kanban/tasks/:id\", async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\"DELETE FROM kanban_tasks WHERE id=$1 AND tenant_slug=$2\", [id, tenantSlug]);\r\n      if (!result.rowCount) return res.status(404).json({ error: \"Task not found\" });\r\n      res.status(204).send();\r\n    } catch (err: any) {\r\n      console.error(\"Delete kanban task error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to delete kanban task\" });\r\n    }\r\n  });\r\n\r\n  // --- Aliases for install-dashboard client (slug style) ---\r\n  // GET /api/kanban/:slug/tasks -> returns snake_case fields as expected by client\r\n  app.get(\"/api/kanban/:slug/tasks\", async (req, res) => {\r\n    try {\r\n      const slug = req.params.slug;\r\n      if (!slug) return res.status(400).json({ error: \"Missing board slug\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\r\n        `SELECT id, board_slug, title, description, status, priority, due_date, assignee, tags, created_at, updated_at\r\n         FROM kanban_tasks WHERE tenant_slug=$1 AND board_slug=$2 ORDER BY created_at DESC`,\r\n        [tenantSlug, slug]\r\n      );\r\n      res.json({ tasks: result.rows });\r\n    } catch (err: any) {\r\n      console.error(\"List kanban tasks (alias) error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list kanban tasks\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/kanban/:slug/tasks -> create task, returns { id }\r\n  app.post(\"/api/kanban/:slug/tasks\", async (req, res) => {\r\n    try {\r\n      const slug = req.params.slug;\r\n      if (!slug) return res.status(400).json({ error: \"Missing board slug\" });\r\n      const id = Math.random().toString(36).slice(2);\r\n      const { title, description, status, priority, due_date, assignee, tags } = req.body || {};\r\n      if (!title || typeof title !== \"string\") return res.status(400).json({ error: \"Invalid title\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\r\n        `INSERT INTO kanban_tasks(id, tenant_slug, board_slug, title, description, status, priority, due_date, assignee, tags)\r\n         VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)`,\r\n        [id, tenantSlug, slug, title, description ?? null, status ?? \"backlog\", priority ?? \"medium\", due_date ?? null, assignee ?? null, Array.isArray(tags) ? tags : []]\r\n      );\r\n      res.status(201).json({ id });\r\n    } catch (err: any) {\r\n      console.error(\"Create kanban task (alias) error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create kanban task\" });\r\n    }\r\n  });\r\n\r\n  // -----------------------------\r\n  // UGC Briefs API (table for Task/URL/Caption/Status)\r\n  // -----------------------------\r\n  const CreateBriefSchema = z.object({\r\n    id: z.string().min(8).max(64),\r\n    scope: z.string().min(1), // e.g., \"ugc\" or \"design\"\r\n    brief: z.string().min(1),\r\n    url: z.string().optional(),\r\n    caption: z.string().optional(),\r\n    status: z.string().min(1), // label such as \"Draft\", \"On Review\", \"Published\" or STATUS_META labels\r\n  });\r\n\r\n  const UpdateBriefSchema = z.object({\r\n    brief: z.string().min(1).optional(),\r\n    url: z.string().url().optional(),\r\n    caption: z.string().optional(),\r\n    status: z.string().min(1).optional(),\r\n  });\r\n\r\n  // (Ensures moved to initPromise above)\r\n\r\n  // GET /api/ugc/briefs?scope=<slug>\r\n  app.get(\"/api/ugc/briefs\", async (req, res) => {\r\n    try {\r\n      const scope = (req.query.scope as string) || \"\";\r\n      if (!scope) return res.status(400).json({ error: \"Missing scope\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\r\n        `SELECT id, scope, brief, url, caption, status, created_at, updated_at\r\n         FROM ugc_briefs WHERE tenant_slug=$1 AND scope=$2 ORDER BY created_at DESC`,\r\n        [tenantSlug, scope]\r\n      );\r\n      res.json({ rows: result.rows });\r\n    } catch (err: any) {\r\n      console.error(\"List briefs error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list briefs\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/ugc/briefs\r\n  app.post(\"/api/ugc/briefs\", async (req, res) => {\r\n    try {\r\n      const parsed = CreateBriefSchema.safeParse(req.body);\r\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const { id, scope, brief, url, caption, status } = parsed.data;\r\n      const urlNorm = url && url.trim().length > 0 ? url : null;\r\n      const captionNorm = caption && caption.trim().length > 0 ? caption : null;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\r\n        `INSERT INTO ugc_briefs(id, tenant_slug, scope, brief, url, caption, status)\r\n         VALUES($1,$2,$3,$4,$5,$6,$7)\r\n         RETURNING id, scope, brief, url, caption, status, created_at, updated_at`,\r\n        [id, tenantSlug, scope, brief, urlNorm, captionNorm, status]\r\n      );\r\n      res.status(201).json({ row: result.rows[0] });\r\n    } catch (err: any) {\r\n      console.error(\"Create brief error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create brief\" });\r\n    }\r\n  });\r\n\r\n  // PUT /api/ugc/briefs/:id\r\n  app.put(\"/api/ugc/briefs/:id\", async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const parsed = UpdateBriefSchema.safeParse(req.body);\r\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const fields = parsed.data;\r\n      const sets: string[] = [];\r\n      const values: any[] = [];\r\n      let idx = 1;\r\n      for (const [k, v] of Object.entries(fields)) {\r\n        if (v === undefined) continue;\r\n        sets.push(`${k}=$${idx++}`);\r\n        values.push(v);\r\n      }\r\n      if (!sets.length) return res.status(400).json({ error: \"No fields to update\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      values.push(id);\r\n      values.push(tenantSlug);\r\n      const result = await pool.query(\r\n        `UPDATE ugc_briefs SET ${sets.join(\", \")}, updated_at=NOW() WHERE id=$${idx} AND tenant_slug=$${idx + 1}\r\n         RETURNING id, scope, brief, url, caption, status, created_at, updated_at`,\r\n        values\r\n      );\r\n      if (!result.rowCount) return res.status(404).json({ error: \"Row not found\" });\r\n      res.json({ row: result.rows[0] });\r\n    } catch (err: any) {\r\n      console.error(\"Update brief error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to update brief\" });\r\n    }\r\n  });\r\n\r\n  // DELETE /api/ugc/briefs/:id\r\n  app.delete(\"/api/ugc/briefs/:id\", async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\"DELETE FROM ugc_briefs WHERE id=$1 AND tenant_slug=$2\", [id, tenantSlug]);\r\n      if (!result.rowCount) return res.status(404).json({ error: \"Row not found\" });\r\n      res.status(204).send();\r\n    } catch (err: any) {\r\n      console.error(\"Delete brief error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to delete brief\" });\r\n    }\r\n  });\r\n\r\n  // --- Aliases for install-dashboard client (briefs paths) ---\r\n  // GET /api/briefs/:scope -> returns { briefs } array\r\n  app.get(\"/api/briefs/:scope\", async (req, res) => {\r\n    try {\r\n      const scope = req.params.scope;\r\n      if (!scope) return res.status(400).json({ error: \"Missing scope\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\r\n        `SELECT id, scope, brief, url, caption, status, created_at, updated_at\r\n         FROM ugc_briefs WHERE tenant_slug=$1 AND scope=$2 ORDER BY created_at DESC`,\r\n        [tenantSlug, scope]\r\n      );\r\n      res.json({ briefs: result.rows });\r\n    } catch (err: any) {\r\n      console.error(\"List briefs (alias) error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list briefs\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/briefs/:scope -> create brief, returns { id }\r\n  app.post(\"/api/briefs/:scope\", async (req, res) => {\r\n    try {\r\n      const scope = req.params.scope;\r\n      const { brief, url, caption, status } = req.body || {};\r\n      if (!scope || !brief || !status) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const id = Math.random().toString(36).slice(2);\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\r\n        `INSERT INTO ugc_briefs(id, tenant_slug, scope, brief, url, caption, status)\r\n         VALUES($1,$2,$3,$4,$5,$6,$7)`,\r\n        [id, tenantSlug, scope, brief, url ?? null, caption ?? null, status]\r\n      );\r\n      res.status(201).json({ id });\r\n    } catch (err: any) {\r\n      console.error(\"Create brief (alias) error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create brief\" });\r\n    }\r\n  });\r\n\r\n  // DELETE /api/briefs/:id -> alias to ugc delete\r\n  app.delete(\"/api/briefs/:id\", async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\"DELETE FROM ugc_briefs WHERE id=$1 AND tenant_slug=$2\", [id, tenantSlug]);\r\n      if (!result.rowCount) return res.status(404).json({ error: \"Row not found\" });\r\n      res.status(204).send();\r\n    } catch (err: any) {\r\n      console.error(\"Delete brief (alias) error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to delete brief\" });\r\n    }\r\n  });\r\n\r\n  // -----------------------------\r\n  // Calendar API (sync events & colors across devices)\r\n  // -----------------------------\r\n  const CreateCalEventSchema = z.object({\r\n    id: z.string().min(6).max(64).optional(),\r\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\r\n    title: z.string().min(1),\r\n    time: z.string().optional(),\r\n    note: z.string().optional(),\r\n  });\r\n\r\n  const SetColorSchema = z.object({\r\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\r\n    color: z.string().min(3).max(16),\r\n  });\r\n\r\n  // GET /api/calendar/local?year=YYYY&month=MM\r\n  app.get(\"/api/calendar/local\", async (req, res) => {\r\n    try {\r\n      const year = (req.query.year as string) || \"\";\r\n      const month = (req.query.month as string) || \"\";\r\n      if (!/^\\d{4}$/.test(year) || !/^\\d{2}$/.test(month))\r\n        return res.status(400).json({ error: \"Invalid year/month\" });\r\n      const start = `${year}-${month}-01`;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const eventsRes = await pool.query(\r\n        `SELECT id, to_char(date,'YYYY-MM-DD') AS date, title, time, note\r\n         FROM calendar_events\r\n         WHERE tenant_slug=$2 AND date >= $1::date AND date < ($1::date + INTERVAL '1 month')\r\n         ORDER BY date ASC, created_at ASC`,\r\n        [start, tenantSlug]\r\n      );\r\n      const colorsRes = await pool.query(\r\n        `SELECT to_char(date,'YYYY-MM-DD') AS date, color\r\n         FROM calendar_day_colors\r\n         WHERE tenant_slug=$2 AND date >= $1::date AND date < ($1::date + INTERVAL '1 month')`,\r\n        [start, tenantSlug]\r\n      );\r\n      const eventsByDay: Record<string, any[]> = {};\r\n      for (const r of eventsRes.rows) {\r\n        if (!eventsByDay[r.date]) eventsByDay[r.date] = [];\r\n        eventsByDay[r.date].push({ id: r.id, title: r.title, time: r.time ?? undefined, note: r.note ?? undefined });\r\n      }\r\n      const colorsByDay: Record<string, string> = {};\r\n      for (const r of colorsRes.rows) colorsByDay[r.date] = r.color;\r\n      res.json({ eventsByDay, colorsByDay });\r\n    } catch (err: any) {\r\n      console.error(\"List calendar state error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list calendar state\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/calendar/local/event\r\n  app.post(\"/api/calendar/local/event\", async (req, res) => {\r\n    try {\r\n      const parsed = CreateCalEventSchema.safeParse(req.body);\r\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const { id = Math.random().toString(36).slice(2), date, title, time, note } = parsed.data;\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\r\n        `INSERT INTO calendar_events(id, tenant_slug, date, title, time, note)\r\n         VALUES($1, $2, $3::date, $4, $5, $6)\r\n         ON CONFLICT (tenant_slug, id)\r\n         DO UPDATE SET date=EXCLUDED.date, title=EXCLUDED.title, time=EXCLUDED.time, note=EXCLUDED.note, updated_at=NOW()`,\r\n        [id, tenantSlug, date, title, time ?? null, note ?? null]\r\n      );\r\n      res.status(201).json({ id });\r\n    } catch (err: any) {\r\n      console.error(\"Create calendar event error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create calendar event\" });\r\n    }\r\n  });\r\n\r\n  // DELETE /api/calendar/local/event/:id\r\n  app.delete(\"/api/calendar/local/event/:id\", async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const tenantSlug = getTenantSlug(req);\r\n      const result = await pool.query(\"DELETE FROM calendar_events WHERE id=$1 AND tenant_slug=$2\", [id, tenantSlug]);\r\n      if (!result.rowCount) return res.status(404).json({ error: \"Event not found\" });\r\n      res.status(204).send();\r\n    } catch (err: any) {\r\n      console.error(\"Delete calendar event error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to delete calendar event\" });\r\n    }\r\n  });\r\n\r\n  // POST /api/calendar/local/color\r\n  app.post(\"/api/calendar/local/color\", async (req, res) => {\r\n    try {\r\n      const parsed = SetColorSchema.safeParse(req.body);\r\n      if (!parsed.success) return res.status(400).json({ error: \"Invalid payload\" });\r\n      const { date, color } = parsed.data;\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\r\n        `INSERT INTO calendar_day_colors(tenant_slug, date, color)\r\n         VALUES($1, $2::date, $3)\r\n         ON CONFLICT (tenant_slug, date)\r\n         DO UPDATE SET color=EXCLUDED.color, updated_at=NOW()`,\r\n        [tenantSlug, date, color]\r\n      );\r\n      res.status(201).json({ ok: true });\r\n    } catch (err: any) {\r\n      console.error(\"Set day color error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to set day color\" });\r\n    }\r\n  });\r\n\r\n  // DELETE /api/calendar/local/color/:date\r\n  app.delete(\"/api/calendar/local/color/:date\", async (req, res) => {\r\n    try {\r\n      const date = req.params.date;\r\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) return res.status(400).json({ error: \"Invalid date\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\"DELETE FROM calendar_day_colors WHERE tenant_slug=$1 AND date=$2::date\", [tenantSlug, date]);\r\n      res.status(204).send();\r\n    } catch (err: any) {\r\n      console.error(\"Clear day color error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to clear day color\" });\r\n    }\r\n  });\r\n\r\n  // -----------------------------\r\n  // Settings API\r\n  // -----------------------------\r\n  // Upload logo: accept base64 WEBP <= 500KB, save to public/uploads and update settings_config.logo_url\r\n  app.post(\"/api/settings/logo\", async (req, res) => {\r\n    try {\r\n      const dataBase64 = String(req.body?.dataBase64 || \"\");\r\n      if (!dataBase64) return res.status(400).json({ error: \"Missing dataBase64\" });\r\n      const buf = Buffer.from(dataBase64, \"base64\");\r\n      const MAX_BYTES = 500 * 1024;\r\n      if (buf.length > MAX_BYTES) return res.status(400).json({ error: \"File too large (>500KB)\" });\r\n      // Minimal WEBP check: RIFF....WEBP\r\n      const isWebp = buf.slice(0, 4).toString(\"ascii\") === \"RIFF\" && buf.slice(8, 12).toString(\"ascii\") === \"WEBP\";\r\n      if (!isWebp) return res.status(400).json({ error: \"Only WEBP images are allowed\" });\r\n\r\n      const uploadsDir = path.join(process.cwd(), \"public\", \"uploads\");\r\n      await fs.promises.mkdir(uploadsDir, { recursive: true });\r\n      const filename = `logo-${Date.now()}.webp`;\r\n      const filePath = path.join(uploadsDir, filename);\r\n      await fs.promises.writeFile(filePath, buf);\r\n      const urlPath = `/uploads/${filename}`;\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\r\n        `INSERT INTO settings_config (tenant_slug, logo_url, updated_at)\r\n         VALUES ($1, $2, NOW())\r\n         ON CONFLICT (tenant_slug) DO UPDATE SET logo_url=EXCLUDED.logo_url, updated_at=EXCLUDED.updated_at`,\r\n        [tenantSlug, urlPath]\r\n      );\r\n\r\n      res.status(201).json({ url: urlPath });\r\n    } catch (err: any) {\r\n      console.error(\"Upload logo error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to upload logo\" });\r\n    }\r\n  });\r\n  app.get(\"/api/settings/config\", async (req, res) => {\r\n    try {\r\n      const tenantSlug = getTenantSlug(req);\r\n      const r = await pool.query(\r\n        `SELECT logo_url, meta_title, workflow_title FROM settings_config WHERE tenant_slug=$1 LIMIT 1`,\r\n        [tenantSlug]\r\n      );\r\n      const row = r.rows[0] || {};\r\n      res.json({\r\n        config: {\r\n          logoUrl: row.logo_url ?? \"/netpiu-logo-2-white-no-background.webp\",\r\n          metaTitle: row.meta_title ?? \"NetPiu Work Management\",\r\n          workflowTitle: row.workflow_title ?? \"Work Management\",\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      console.error(\"Get settings error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to load settings\" });\r\n    }\r\n  });\r\n\r\n  app.post(\"/api/settings/config\", async (req, res) => {\r\n    try {\r\n      const { logoUrl, metaTitle, workflowTitle } = req.body || {};\r\n      const tenantSlug = getTenantSlug(req);\r\n      await pool.query(\r\n        `INSERT INTO settings_config (tenant_slug, logo_url, meta_title, workflow_title, updated_at)\r\n         VALUES ($1, $2, $3, $4, NOW())\r\n         ON CONFLICT (tenant_slug) DO UPDATE SET\r\n           logo_url=EXCLUDED.logo_url,\r\n           meta_title=EXCLUDED.meta_title,\r\n           workflow_title=EXCLUDED.workflow_title,\r\n           updated_at=EXCLUDED.updated_at`,\r\n        [tenantSlug, logoUrl ?? null, metaTitle ?? null, workflowTitle ?? null]\r\n      );\r\n      res.status(201).json({ ok: true });\r\n    } catch (err: any) {\r\n      console.error(\"Save settings error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to save settings\" });\r\n    }\r\n  });\r\n\r\n  app.get(\"/api/settings/seats\", async (req, res) => {\r\n    try {\r\n      const tenantSlug = getTenantSlug(req);\r\n      const r = await pool.query(\r\n        `SELECT id, email, role, created_at FROM seats WHERE tenant_slug=$1 ORDER BY created_at DESC`,\r\n        [tenantSlug]\r\n      );\r\n      const seats = r.rows.map((row: any) => ({\r\n        id: row.id,\r\n        email: row.email,\r\n        role: row.role,\r\n        createdAt: (row.created_at as Date).toISOString?.() ?? row.created_at,\r\n      }));\r\n      res.json({ seats });\r\n    } catch (err: any) {\r\n      console.error(\"List seats error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to list seats\" });\r\n    }\r\n  });\r\n\r\n  app.post(\"/api/settings/seats\", async (req, res) => {\r\n    try {\r\n      const email = String(req.body?.email || \"\").trim().toLowerCase();\r\n      const role = String(req.body?.role || \"user\").toLowerCase();\r\n      if (!email || !email.includes(\"@\")) return res.status(400).json({ error: \"Invalid email\" });\r\n      if (![\"owner\", \"user\"].includes(role)) return res.status(400).json({ error: \"Invalid role\" });\r\n      const tenantSlug = getTenantSlug(req);\r\n      const r = await pool.query(\r\n        `INSERT INTO seats(email, role, tenant_slug) VALUES($1, $2, $3)\r\n         ON CONFLICT (tenant_slug, email) DO UPDATE SET role=EXCLUDED.role\r\n         RETURNING id, email, role, created_at`,\r\n        [email, role, tenantSlug]\r\n      );\r\n      const row = r.rows[0];\r\n      res.status(201).json({\r\n        seat: {\r\n          id: row.id,\r\n          email: row.email,\r\n          role: row.role,\r\n          createdAt: (row.created_at as Date).toISOString?.() ?? row.created_at,\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      console.error(\"Create seat error:\", err?.message || err);\r\n      res.status(500).json({ error: \"Failed to create seat\" });\r\n    }\r\n  });\r\n\r\n  return app;\r\n}\r\n","import path from \"path\";\r\nimport os from \"os\";\r\nimport { createServer } from \"./index\";\r\nimport * as express from \"express\";\r\n\r\nconst app = createServer();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// In production, serve SPA by default, NetPiu only under /netpiu\r\nconst __dirname = import.meta.dirname;\r\nconst spaPath = path.join(__dirname, \"../spa\");\r\nconst netpiuPath = path.join(__dirname, \"../netpiu\");\r\n\r\n// Serve SPA static files\r\napp.use(express.static(spaPath));\r\n\r\n// Netpiu assets (absolute '/assets' used by Netpiu build)\r\napp.use('/assets', express.static(path.join(netpiuPath, 'assets')));\r\n\r\n// Netpiu routes only under /netpiu\r\napp.get([\"/netpiu\", /^\\/netpiu\\/(.*)/], (_req, res) => {\r\n  res.sendFile(path.join(netpiuPath, \"index.html\"));\r\n});\r\n\r\n// Redirect any '/home' access to root\r\napp.get([\"/home\", /^\\/home\\/(.*)/], (req, res) => {\r\n  res.redirect(308, \"/\");\r\n});\r\n\r\n// Catch-all: non-API/auth routes go to SPA (/, /home, etc.)\r\napp.get(/^(?!\\/(?:api\\/|health|auth\\/)).*/, (_req, res) => {\r\n  res.sendFile(path.join(spaPath, \"index.html\"));\r\n});\r\n\r\n// Resolve LAN IP for convenience logging\r\nfunction getLanAddress() {\r\n  const nets = os.networkInterfaces();\r\n  for (const name of Object.keys(nets)) {\r\n    const addrs = nets[name] || [];\r\n    for (const addr of addrs) {\r\n      if (addr && addr.family === \"IPv4\" && !addr.internal) {\r\n        return addr.address;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\napp.listen(Number(port), \"0.0.0.0\", () => {\r\n  const lan = getLanAddress();\r\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\r\n  console.log(`📱 Frontend: http://localhost:${port}`);\r\n  if (lan) {\r\n    console.log(`📡 LAN Access: http://${lan}:${port}`);\r\n  }\r\n  console.log(`🔧 API: http://localhost:${port}/api`);\r\n});\r\n\r\n// Graceful shutdown\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on(\"SIGINT\", () => {\r\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n"],"names":["app","express"],"mappings":"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"}